name: Deploy to EKS and Terraform

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/terraform/**'
      - 'services/**'

jobs:
  terraform:
    if: "contains(github.event.head_commit.message, '[terraform]') || github.event_name == 'push' && github.event.paths[0] startsWith 'infrastructure/terraform/'"
    runs-on: ubuntu-latest

    steps:
    # Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::221082192283:role/hs-eks-master
        aws-region: ap-south-1

    # Initialize Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Terraform Init and Apply
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init -backend-config="helthsync-terraform-state-bucket"
    - name: Terraform Plan
      run: terraform plan -out=tfplan -input=false
      working-directory: infrastructure/terraform
    - name: Terraform Apply
      run: terraform apply -input=false tfplan
      working-directory: infrastructure/terraform

  deploy_services:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: "ap-south-1"
      EKS_CLUSTER_NAME: "helthsync-eks"
      AWS_ACCOUNT_ID: "221082192283"
      SERVICES: "patient-service doctor-service appointment-service"

    steps:
    # Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::221082192283:role/hs-eks-master
        aws-region: ap-south-1

    # Authenticate with Amazon ECR
    - name: Authenticate with Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

    # Build and push Docker images for each service
    - name: Build and push Docker images
      run: |
        for SERVICE in $SERVICES; do
          echo "Building and pushing Docker image for $SERVICE"
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE:latest ./services/$SERVICE
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE:latest
        done

    # Update Kubernetes deployments
    - name: Update Kubernetes deployments
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
        for SERVICE in $SERVICES; do
          echo "Updating Kubernetes deployment for $SERVICE"
          kubectl set image deployment/$SERVICE $SERVICE=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE:latest
        done
