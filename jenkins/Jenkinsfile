pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        TESTING_CLUSTER = 'helthsync-eks-test'
        PRODUCTION_CLUSTER = 'helthsync-eks-prod'
        DOCKER_REPO = 'chiranhw95'
        AWS_ACCOUNT_ID = '586794443713'
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }


        stage('Deploy Services to Testing ECR') {
            steps {
                withAWS(credentials: 'AWS_CREDS', region: "${AWS_DEFAULT_REGION}") {
                     script {
                        def services = ['patient-service', 'doctor-service','appointment-service', 'aggregator-service', 'notification-service']
                        def ecr_registry_id = """${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                        for (service in services) {
                            sh """docker build --no-cache -t ${service}:latest ./services/${service}"""
                            sh """/usr/local/bin/aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ecr_registry_id}"""
                            sh """docker tag ${service}:latest ${ecr_registry_id}/test/helthsync/${service}:latest"""
                            sh """docker push ${ecr_registry_id}/test/helthsync/${service}"""
                        }
                     }
                }
                
            }
        }


        stage('Deploy services to Testing EKS') {
            steps {
                script {
                    def services = ['patient-service', 'doctor-service','appointment-service', 'aggregator-service', 'notification-service']
                    def ecr_registry_id = """${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                    for (service in services) {
                        // Switch context to testing cluster
                        withCredentials([aws(credentialsId: 'AWS_CREDS')]) {
                            sh """
                            /usr/local/bin/aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${TESTING_CLUSTER}  --debug
                            kubectl apply -f ./jenkins/k8s/testing-${service}-deployment.yml
                            """

                            // Verify deployment
                            sh """
                            kubectl get pods
                            """
                        }
                    }
                }
            }
        }


        stage('Run Unit Tests') {
            steps {
                script {
                    def services = ['patient-service', 'doctor-service', 'appointment-service']
                    for (service in services) {
                        sh """
                        echo "Running unit tests for ${service}..."
                        cd ./services/${service}

                        pipx install pytest
                        pipx install fastapi

                        pytest --junitxml=results_${service}.xml tests/
                        """
                    }
                }
            }
        }


        stage('Deploy Services to PROD ECR') {
            when {
                branch 'main'
            }
            steps {
                withAWS(credentials: 'AWS_CREDS', region: "${AWS_DEFAULT_REGION}") {
                     script {
                        def services = ['patient-service', 'doctor-service','appointment-service', 'aggregator-service', 'notification-service']
                        def ecr_registry_id = """${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                        for (service in services) {
                            sh """docker build --no-cache -t ${service}:latest ./services/${service}"""
                            sh """/usr/local/bin/aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ecr_registry_id}"""
                            sh """docker tag ${service}:latest ${ecr_registry_id}/prod/helthsync/${service}:latest"""
                            sh """docker push ${ecr_registry_id}/prod/helthsync/${service}"""
                        }
                     }
                }
                
            }
        }


        stage('Deploy services to PROD EKS') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def services = ['patient-service', 'doctor-service','appointment-service', 'aggregator-service', 'notification-service']
                    def ecr_registry_id = """${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                    for (service in services) {
                        // Switch context to testing cluster
                        withCredentials([aws(credentialsId: 'AWS_CREDS')]) {
                            sh """
                            /usr/local/bin/aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${PRODUCTION_CLUSTER}
                            kubectl apply -f ./jenkins/k8s/prod-${service}-deployment.yml
                            """

                            // Verify deployment
                            sh """
                            kubectl get pods
                            """
                        }
                    }
                }
            }
        }

    }

    post {
        always {
            // clean workspace
            cleanWs()
            echo 'Cleaning up unused Docker resources...'
            sh 'docker system prune -af --volumes'
        }
    }
}
