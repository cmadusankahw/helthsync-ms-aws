pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        TESTING_CLUSTER = 'helthsync-eks-test'
        PRODUCTION_CLUSTER = 'helthsync-eks-prod'
        DOCKER_REPO = 'chiranhw95'
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Initialize') {
            steps {
                script {
                    def dockerHome = tool 'docker'
                    env.PATH = "${dockerHome}/bin:${env.PATH}"
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                        def services = ['patient-service', 'doctor-service','appointment-service']
                        for (service in services) {
                            sh """
                            docker build -t ${DOCKER_REPO}/${service}:latest ./services/${service}
                            docker push ${DOCKER_REPO}/${service}:latest
                            """
                        }
                }
            }
        }

        stage('Deploy to Testing Cluster') {
            steps {
                script {
                    // Switch context to testing cluster
                    sh """
                    aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${TESTING_CLUSTER}
                    kubectl apply -f ./jenkins/k8s/testing-deployment.yaml -n testing
                    """
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    // Run simple API tests
                    def testResult = sh(script: "curl -f https://299C0166393D40BE8FA1D8BBF89233F5.yl4.ap-south-1.eks.amazonaws.com/health", returnStatus: true)
                    if (testResult != 0) {
                        error "Tests failed on testing cluster"
                    }
                }
            }
        }

        stage('Deploy to Production Cluster') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    // Switch context to production cluster
                    sh """
                    aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${PRODUCTION_CLUSTER}
                    kubectl apply -f ./jenkins/k8s/production-deployment.yaml -n production
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean workspace
        }
        failure {
            mail to: 'chiran.20222249@iit.ac.lk',
                 subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                 body: "Check the Jenkins logs for more details."
        }
    }
}
